const std = @import("std");
const solver = @import("./solver.zig");
const Solver = solver.Solver;

const c: [_]f64 = .{
    0.161,
    0.327,
    0.9,
    0.9,
    0.9800255409045097,
    1.0,
    1.0,
};
const a: [_]f64 = .{
    0.161,
    -0.008480655492356989,
    0.335480655492357,
    2.8971530571054935,
    -6.359448489975075,
    4.3622954328695815,
    5.325864828439257,
    -11.748883564062828,
    7.4955393428898365,
    -0.09249506636175525,
    5.86145544294642,
    -12.92096931784711,
    8.159367898576159,
    -0.071584973281401,
    -0.028269050394068383,
    0.09646076681806523,
    0.01,
    0.4798896504144996,
    1.379008574103742,
    -3.290069515436081,
    2.324710524099774,
};
const b: [_]f64 = .{
    -0.00178001105222577714,
    -0.0008164344596567469,
    0.007880878010261995,
    -0.1447110071732629,
    0.5823571654525552,
    -0.45808210592918697,
    0.015151515151515152,
};
const r: [_]f64 = .{
    1.0,
    -2.763706197274826,
    2.9132554618219126,
    -1.0530884977290216,
    0.13169999999999998,
    -0.2234,
    0.1017,
    3.9302962368947516,
    -5.941033872131505,
    2.490627285651253,
    -12.411077166933676,
    30.33818863028232,
    -16.548102889244902,
    37.50931341651104,
    -88.1789048947664,
    47.37952196281928,
    -27.896526289197286,
    65.09189467479366,
    -34.87065786149661,
    1.5,
    -4,
    2.5,
};

pub fn Tsit5(comptime T: type, comptime N: usize, comptime P: type) type {
    return struct {
        const Self = @This();
        const SolverType = Solver(T, N);
        const U = SolverType.U;
        const ProbFn = solver.ProbFnType(T, N, P);

        prob: *const ProbFn,
        params: P,

        const coeff = Coefficients(T){};
    };
}
